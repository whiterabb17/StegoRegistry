######## Resource bundle for labels to be displayed in OpenStego ########

# Master labels
appName = @app.name@
appVersion = v@app.version@
copyright = Copyright (c) 2007-@time.year@ @author.name@. All Rights Reserved.
homepage = @homepage.url@

# Error messages
err.config.useCompression.invalid = Invalid value for configuration item ''useCompression''\: {0}
err.config.useEncryption.invalid = Invalid value for configuration item ''useEncryption''\: {0}
err.config.password.invalid = Invalid password
err.config.invalidKey = Invalid configuration item provided\: {0}
err.config.invalidCryptAlgo = Invalid encryption algorithm provided\: {0}. Possible values are AES128 or AES256
err.userpref.valueNotInteger = Invalid value in openstego.ini file for key\: {0}. Must be a valid integer
err.userpref.valueNotFloat = Invalid value in openstego.ini file for key\: {0}. Must be a valid floating point number
err.userpref.valueNotBoolean = Invalid value in openstego.ini file for key\: {0}. Must be one of\: true, false, t, f, yes, no, y, n, 1, 0
err.corruptData = Embedded data is corrupt OR invalid password has been provided
err.noValidPlugin = Embedded data is corrupt OR invalid password has been provided OR no algorithm found which can handle the given stego file
err.image.type.invalid = Invalid or unsupported image format: {0}
err.image.file.invalid = Invalid or unsupported image file: {0}
err.plugin.notSpecified = No plugin specified
err.plugin.notFound = No plugin found with name: {0}
err.plugin.wmNotSupported = Selected plugin does not support watermarking
err.plugin.dhNotSupported = Selected plugin does not support data hiding
err.image.size.mismatch = The dimensions of the two input images do not match
err.memory.full = OpenStego has run out of allocated memory while performing the operation. Please try using smaller image size
err.gensig.pwdMandatory = Password is mandatory to generate a signature

# Labels for GUI
gui.window.title = @app.name@

gui.menu.file = File
gui.menu.file.exit = Exit
gui.menu.help = Help
gui.menu.help.about = About

gui.label.help.sitelink = For more details about this product, please visit <a href='@homepage.url@'>OpenStego website</a>.
gui.label.help.ackHeader = Acknowledgements:
gui.label.help.acknowledgement = The digital watermarking code in this product is based on the code provided by Peter Meerwald. Refer to his excellent thesis on <a href='http://www.cosy.sbg.ac.at/~pmeerw/Watermarking/'>watermarking</a>: Peter Meerwald, Digital Image Watermarking in the Wavelet Transfer Domain, Master's Thesis, Department of Scientific Computing, University of Salzburg, Austria, January 2001.

gui.label.tabHeader.dataHiding = Data hiding
gui.label.tabHeader.watermarking = Digital watermarking (Beta)
gui.label.tab.dhEmbed = Hide data
gui.label.tab.dhExtract = Extract data
gui.label.tab.wmGenSig = Generate signature
gui.label.tab.wmEmbed = Embed watermark
gui.label.tab.wmVerify = Verify watermark

gui.label.panelHeader.dhEmbed = Hide data in harmless looking files
gui.label.panelHeader.dhExtract = Extract hidden data
gui.label.panelHeader.wmGenSig = Generate signature to watermark your files
gui.label.panelHeader.wmEmbed = Embed watermark using your signature
gui.label.panelHeader.wmVerify = Verify files for existence of your watermark

gui.label.dhEmbed.msgFile = Message file
gui.label.dhEmbed.coverFile = Cover file
gui.label.dhEmbed.coverFileMsg = (Select multiple files or provide wildcard (*, ?) to embed same message in multiple files)
gui.label.dhEmbed.stegoFile = Output stego file
gui.label.dhEmbed.option.title = Options
gui.label.dhEmbed.option.cryptalgo = Encryption algorithm
gui.label.dhEmbed.option.password = Password
gui.label.dhEmbed.option.confPassword = Confirm password
gui.label.dhEmbed.pluginOption.title = Plugin options
gui.button.dhEmbed.run = Hide data

gui.label.dhExtract.stegoFile = Input stego file
gui.label.dhExtract.outputDir = Output folder for message file
gui.button.dhExtract.run = Extract data

gui.label.wmGenSig.inputKey = Passphrase to be used to generate signature
gui.label.wmGenSig.sigFile = Output signature file
gui.button.wmGenSig.run = Generate signature

gui.label.wmEmbed.fileForWm = File to be watermarked
gui.label.wmEmbed.fileForWmMsg = (Select multiple files or provide wildcard (*, ?) to watermark multiple files)
gui.label.wmEmbed.sigFile = Signature file
gui.label.wmEmbed.outputWmFile = Output watermarked file
gui.button.wmEmbed.run = Embed watermark

gui.label.wmVerify.inputWmFile = File to be checked for watermark
gui.label.wmVerify.inputWmFileMsg = (Select multiple files or provide wildcard (*, ?) to verify watermark in multiple files)
gui.label.wmVerify.sigFile = Original signature file
gui.button.wmVerify.run = Verify watermark
gui.label.wmVerify.result.header.fileName = File name
gui.label.wmVerify.result.header.strength = Strength

gui.label.progress.processing = Processing
gui.label.progress.cancel = Cancel

gui.msg.title.success = Success
gui.msg.title.warn = Warning
gui.msg.title.err = Error
gui.msg.title.results = Results
gui.msg.err.browserLaunch = Error occurred while launching browser
gui.msg.err.mandatoryCheck = Please provide the value for {0}
gui.msg.warn.fileExists = File {0} already exists. Overwrite?

gui.msg.err.dhEmbed.passwordMismatch = Password does not match the Confirm password
gui.msg.err.dhEmbed.coverFileNotFound = No match found for cover file: {0}
gui.msg.err.dhEmbed.outputShouldBeFile = Selected output stego file is a directory. Please select a file
gui.msg.err.dhEmbed.outputShouldBeDir = Output stego file should be a directory when multiple cover files are selected
gui.msg.success.dhEmbed = Message embedded into {0} cover file(s). Skipped {1} file(s)

gui.msg.success.dhExtract = Message file successfully extracted from the cover file: {0}

gui.msg.success.wmGenSig = Signature file successfully generated

gui.msg.err.wmEmbed.inputFileNotFound = No match found for input file: {0}
gui.msg.err.wmEmbed.outputShouldBeFile = Selected output watermarked file is a directory. Please select a file
gui.msg.err.wmEmbed.outputShouldBeDir = Output watermarked file should be a directory when multiple input files are selected
gui.msg.success.wmEmbed = Watermarked {0} file(s). Skipped {1} file(s)

gui.msg.err.wmVerify.inputFileNotFound = No match found for input file: {0}
gui.msg.success.wmVerify = The watermark strength check results are:

gui.filer.title.dhEmbed.msgFile = Open - Select message file
gui.filer.title.dhEmbed.coverFile = Open - Select cover file
gui.filer.title.dhEmbed.stegoFile = Save - Select output stego file
gui.filer.title.dhExtract.stegoFile = Open - Select input stego file
gui.filer.title.dhExtract.outputDir = Select output folder for message file
gui.filer.title.wmGenSig.sigFile = Save - Select signature file
gui.filer.title.wmEmbed.fileForWm = Open - Select file to be watermarked
gui.filer.title.wmEmbed.sigFile = Open - Select signature file
gui.filer.title.wmEmbed.outputWmFile = Save - Select output watermarked file
gui.filer.title.wmExtract.inputWmFile = Open - Select file to be checked for watermark
gui.filer.title.wmExtract.sigFile = Open - Select original signature file

gui.filer.filter.coverFiles = Cover files ({0})
gui.filer.filter.stegoFiles = Stego files ({0})
gui.filer.filter.filesForWm = Files for watermarking ({0})
gui.filer.filter.wmFiles = Watermarked files ({0})
gui.filer.filter.sigFiles = Signature files ({0})


# Labels for command line interface
cmd.usage = @app.name@ is a steganography application that provides two functionalities:\n\
\  1. Data Hiding: It can hide any data within an image file.\n\
\  2. Watermarking: Watermarking image files with an invisible signature. It\n\
\     can be used to detect unauthorized file copying.\n\
\n\
For GUI:\n\
\  java -jar <path>{0}openstego.jar\n\
\n\
For command line interface:\n\
\  java -jar <path>{0}openstego.jar <command> [options]\n\
\n\
The first argument must be a command. Valid commands are:\n\
\n\
\  embed, --embed                Embed message into cover file\n\
\  extract, --extract            Extract message from stego file\n\
\  gensig, --gensig              Generate a signature for watermarking\n\
\  embedmark, --embedmark        Watermark a cover file using signature\n\
\  checkmark, --checkmark        Checks for watermark presence in the file\n\
\  algorithms, --algorithms      List down supported steganography algorithms\n\
\  readformats --readformats     List down supported formats for cover file\n\
\  writeformats, --writeformats  List down supported formats for stego file\n\
\  help, --help                  Display this help. To get help on options\n\
\                                specific to an algorithm, provide the name of\n\
\                                the algorithm using ''-a'' option\n\
\n\
Following option is common for all commands other than ''algorithms'':\n\
\n\
\    -a, --algorithm <algorithm_name>\n\
\        Name of the steganography algorithm to use. List of the supported\n\
\        algorithms can be retrieved using ''algorithms'' command\n\
\n\
''embed'' options:\n\
\n\
\    -mf, --messagefile <filename>\n\
\        Source message/data file. If this option is not provided or ''-''\n\
\        (without quotes) is provided as the value then the message data is\n\
\        read from stdin\n\
\n\
\    -cf, --coverfile <filename>\n\
\        Cover file in which the message will be embedded. This option supports\n\
\        ''*'' and ''?'' wildcards for filename. If wildcard filename is provided\n\
\        then make sure that it is surrounded by double quotes.\n\
\        Multiple filenames can also be provided by separating them with '';''\n\
\        (semi-colon).\n\
\        If the wildcard expression returns more than one file, then ''-sf''\n\
\        option is ignored, and each coverfile is overwritten with the\n\
\        corresponding generated stegofile\n\
\n\
\    -sf, --stegofile <filename>\n\
\        Output stego file containing the embedded message. If this option is\n\
\        not provided or ''-'' (without quotes) is provided as the value then the\n\
\        stego file is written to stdout\n\
\n\
\    -c, --compress\n\
\        Compress the message file before embedding (default)\n\
\n\
\    -C, --nocompress\n\
\        Do not compress the message file before embedding\n\
\n\
\    -e, --encrypt\n\
\        Encrypt the message file before embedding\n\
\n\
\    -E, --noencrypt\n\
\        Do not encrypt the message file before embedding (default)\n\
\n\
\    -p, --password <password>\n\
\        Password to be used for encryption. If this is not provided then\n\
\        prompt will be displayed for entry\n\
\n\
\    -A, --cryptalgo <crypto algorithm>\n\
\        Algorithm to be used for encryption. Defaults to AES128. Possible\n\
\        values are AES128 or AES256. Please note that AES256 will only be\n\
\        supported with JRE having unlimited strength jurisdiction policy\n\
\n\
''extract'' options:\n\
\n\
\    -sf, --stegofile <filename>\n\
\        Stego file containing the embedded message\n\
\n\
\    -xf, --extractfile <filename>\n\
\        Optional filename for the extracted data. Use this to override the\n\
\        filename embedded in the stego file\n\
\n\
\    -xd, --extractdir <dir>\n\
\        Directory where the message file will be extracted. If this option is\n\
\        not provided, then the file is extracted to current directory\n\
\n\
\    -p, --password <password>\n\
\        Password to be used for decryption. If this is not provided then\n\
\        prompt will be displayed for entry (if the message is encrypted)\n\
\n\
''gensig'' options:\n\
\n\
\    -gf, --sigfile <filename>\n\
\        Output signature file that can be used to watermark files. If this\n\
\        option is not provided or ''-'' (without quotes) is provided as the\n\
\        value then the signature file is written to stdout\n\
\n\
\    -p, --password <password>\n\
\        Password to be used for generation of signature. If this is not\n\
\        provided then prompt will be displayed for entry\n\
\n\
''embedmark'' options:\n\
\n\
\    -gf, --sigfile <filename>\n\
\        Watermarking signature file. If this option is not provided or ''-''\n\
\        (without quotes) is provided as the value then the signature data is\n\
\        read from stdin\n\
\n\
\    -cf, --coverfile <filename>\n\
\        Cover file which needs to be digitally watermarked. This option supports\n\
\        ''*'' and ''?'' wildcards for filename. If wildcard filename is provided\n\
\        then make sure that it is surrounded by double quotes.\n\
\        Multiple filenames can also be provided by separating them with '';''\n\
\        (semi-colon).\n\
\        If the wildcard expression returns more than one file, then ''-sf''\n\
\        option is ignored, and each coverfile is overwritten with the\n\
\        corresponding generated stegofile\n\
\n\
\    -sf, --stegofile <filename>\n\
\        Output stego file containing the embedded watermark. If this option is\n\
\        not provided or ''-'' (without quotes) is provided as the value then the\n\
\        stego file is written to stdout\n\
\n\
''checkmark'' options:\n\
\n\
\    -sf, --stegofile <filename>\n\
\        Stego file containing the embedded watermark\n\
\n\
\    -gf, --sigfile <filename>\n\
\        Signature file which was used to watermark the file\n\
\n\
Examples:\n\
\n\
\  To embed secret.txt into wallpaper.png and generate the output into test.png:\n\
\n\
\      java -jar <path>{0}openstego.jar embed -a lsb -mf secret.txt \\\n\
\        -cf wallpaper.png -sf test.png\n\
\   OR\n\
\      java -jar <path>{0}openstego.jar --embed --algorithm=lsb \\\n\
\        --messagefile=secret.txt --coverfile=wallpaper.png --stegofile=test.png\n\
\n\
\  To extract embedded data from test.png to /data directory:\n\
\n\
\      java -jar <path>{0}openstego.jar extract -a lsb -sf test.png -xd /data\n\
\   OR\n\
\      java -jar <path>{0}openstego.jar extract --algorithm=lsb \\\n\
\        --stegofile=test.png --extractdir=/data\n\
\n\
\  To generate a signature file:\n\
\n\
\      java -jar <path>{0}openstego.jar gensig -a dwtxie -gf my.sig\n\
\   OR\n\
\      java -jar <path>{0}openstego.jar --gensig --algorithm=dwtxie \\\n\
\        --sigfile=my.sig\n\
\n\
\  To embed signature into owned.png and generate the output into out.png:\n\
\n\
\      java -jar <path>{0}openstego.jar embedmark -a dwtxie -gf my.sig \\\n\
\        -cf owned.png -sf out.png\n\
\   OR\n\
\      java -jar <path>{0}openstego.jar --embedmark --algorithm=dwtxie \\\n\
\        --sigfile=my.sig --coverfile=owned.png --stegofile=out.png\n\
\n\
\  To check for watermark in test.png using my.sig signature file:\n\
\n\
\      java -jar <path>{0}openstego.jar checkmark -a dwtxie -gf my.sig \\\n\
\        -sf test.png\n\
\   OR\n\
\      java -jar <path>{0}openstego.jar checkmark --algorithm=dwtxie \\\n\
\        --sigfile=my.sig --stegofile=test.png\n\
\n\
\  Piping example:\n\
\n\
\      ls -R | java -jar <path>{0}openstego.jar embed -a lsb > test.png\n\
\n\
\  Wildcard example (Please note that the double quotes are important):\n\
\n\
\      java -jar <path>{0}openstego.jar embed -a lsb \\\n\
\        -cf \"img???.png;wall*.png\" -mf watermark.txt

cmd.msg.fileExtracted = Extracted file: {0}
cmd.msg.coverProcessed = Cover file processed and stego file written: {0}
cmd.msg.enterPassword = Enter Password:
cmd.msg.coverFileNotFound = No match found for cover file: {0}
cmd.warn.stegoFileIgnored = WARNING: Stegofile name has been ignored, because multiple coverfiles are provided. Each \
                            coverfile will be overwritten with the generated stegofile
cmd.label.purpose.caption = Purpose:
cmd.label.purpose.DATA_HIDING = Data Hiding
cmd.label.purpose.WATERMARKING = Watermarking
