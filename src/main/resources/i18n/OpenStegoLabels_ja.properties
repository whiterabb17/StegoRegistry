######## Resource bundle for labels to be displayed in OpenStego ########
######## (Japanese)

# Master labels
versionString = OpenStego v0.6.1

# Error messages
err.config.useCompression.invalid = 設定項目「useCompression」の値は無効です：{0}
err.config.useEncryption.invalid = 設定項目「useEncryption」の値は無効です：{0}
err.config.password.invalid = 入力されたパスワードは無効です。
err.config.invalidKey = 入力された設定項目「{0}」は無効です。
err.corruptData = 埋め込まれたデータは壊れている、または入力されたパスワードは無効です。
err.noValidPlugin = 埋め込まれたデータは壊れている、または入力されたパスワードは無効である、またはステゴファイルを扱うアルゴリズムは存在しません。
err.image.type.invalid = 「{0}」は無効またはサポートされていない画像フォーマットです。
err.image.file.invalid = 「{0}」は無効またはサポートされていない画像ファイルです。
err.plugin.notSpecified = アルゴリズムを入力する必要があります。
err.plugin.notFound = 入力されたアルゴリズム「{0}」を見つかりません。
err.plugin.sigNotWm = 選択されたアルゴリズムは電子透かしをサポートしていないため、調印を作成する事はできません。
err.image.size.mismatch = 入力された２つの画像の寸法が一致しません。
err.memory.full = 操作の実行中に割り当てられたメモリを不足したため、より小さい画像を再度お試しください。

# Labels for GUI
gui.window.title = OpenStego

gui.button.ok = OK
gui.button.cancel = キャンセル

gui.label.algorithmList = ステガノグラフィアルゴリズムを選択
gui.label.dhEmbed.msgFile = メッセージファイル
gui.label.dhEmbed.coverFile = カバーファイル
gui.label.dhEmbed.coverFileMsg = <html>「複数のファイルを選択、または半角ワイルドカード「*、?」を入力可能です。<br/>メッセージは複数のファイルに埋め込まれます」</html>
gui.label.dhEmbed.stegoFile = 出力ステゴファイル
gui.label.dhExtract.stegoFile = ステゴファイルを入力
gui.label.dhExtract.outputDir = メッセージを出力フォルダー

gui.label.tab.dhEmbed = 埋め込み
gui.label.tab.dhExtract = 取り出し

gui.label.dhEmbed.option.title = オプション
gui.label.option.useCompression = データを圧縮する
gui.label.option.useEncryption = データを暗号化する
gui.label.dhEmbed.option.password = パスワード
gui.label.dhEmbed.option.confPassword = パスワードを確認

gui.label.pluginOption.title = アルゴリズム特定のオプション
gui.label.plugin.auto = 自動選択

gui.msg.title.success = 成功
gui.msg.title.warn = 警告
gui.msg.title.err = エラー
gui.msg.title.input = 入力
gui.msg.success.dhEmbed = メッセージは{0}つのカバーファイルに正常に埋め込まれました。{1}つのカバーファイルをスキップしました。
gui.msg.success.dhExtract = メッセージファイル「{0}」を正常に取り出しました。
gui.msg.warn.fileExists = ファイル「{0}」は既に存在しています。上書きしてもよろしいですか?
gui.msg.err.mandatoryCheck = {0}の値が必要です。
gui.msg.err.dhEmbed.passwordMismatch = パスワードが確認用のパスワードと一致していません。
gui.msg.input.password = パスワードの値が必要です。
gui.msg.err.dhEmbed.coverFileNotFound = 入力されたカバーファイルまたはワイルドカードを一致するファイルを見つかりません: {0}
gui.msg.err.dhEmbed.outputShouldBeFile = 選択された出力ステゴファイルはフォルダーです。ファイル名を入力してください。
gui.msg.err.dhEmbed.outputShouldBeDir = 複数のカバーファイルを選択された際、出力ステゴファイルはフォルダーである必要があります。

gui.filer.title.dhEmbed.msgFile = メッセージファイルを選択
gui.filer.title.dhEmbed.coverFile = カバーファイルを選択
gui.filer.title.dhEmbed.stegoFile = 出力ステゴファイルを選択
gui.filer.title.dhExtract.stegoFile = ステゴファイルを選択
gui.filer.title.dhExtract.outputDir = メッセージファイルを出力フォルダーを選択
gui.filer.filter.coverFiles = カバーファイル ({0})
gui.filer.filter.stegoFiles = ステゴファイル ({0})

# Labels for command line interface
cmd.usage = . Copyright (c) 2007-@time.year@ @author.name@\n\
\n\
GUIのため：\n\
\  java -jar <パス>{0}openstego.jar\n\
\n\
コマンドラインインターフェイスのため:\n\
\  java -jar <パス>{0}openstego.jar <コマンド> [オプション]\n\
\n\
最初の引数は、コマンドが必要です。有効なコマンド:\n\
\n\
\  embed, --embed                メッセージをカバーファイルに埋め込む\n\
\  extract, --extract            メッセージをステゴファイルから取り出す\n\
\  algorithms, --algorithms      サポートされているアルゴリズム一覧\n\
\  readformats --readformats     サポートされているカバーファイルフォーマット\n\
\                                一覧\n\
\  writeformats, --writeformats  サポートされているステゴファイルフォーマット\n\
\                                一覧\n\
\  help, --help                  このヘルプを表示。 アルゴリズム特定のヘルプを\n\
\                                見るために、アルゴリズム名を「-a」オプション\n\
\                                で指定してください。\n\
\n\
下記のオプションは「algorithms」しかの全コマンドに使用されます：\n\
\n\
\    -a, --algorithm <アルゴリズム名>\n\
\        使用されるステガノグラフィアルゴリズムの名前。サポートされているアルゴ\n\
\        リズム一覧を見るために「algorithms」コマンドを使用してください。\n\
\n\
「embed」コマンドのオプション：\n\
\n\
\    -mf, --messagefile <ファイル名>\n\
\        Source message/data file. If this option is not provided or ''-''\n\
\        (without quotes) is provided as the value then the message data is\n\
\        read from stdin\n\
\n\
\    -cf, --coverfile <ファイル名>\n\
\        Cover file in which the message will be embedded. This option supports\n\
\        ''*'' and ''?'' wildcards for filename. If wildcard filename is provided\n\
\        then make sure that it is surrounded by double quotes.\n\
\        Multiple filenames can also be provided by separating them with '';''\n\
\        (semi-colon).\n\
\        If the wildcard expression returns more than one file, then ''-sf''\n\
\        option is ignored, and each coverfile is overwritten with the\n\
\        corresponding generated stegofile\n\
\n\
\    -sf, --stegofile <ファイル名>\n\
\        Output stego file containing the embedded message. If this option is\n\
\        not provided or ''-'' (without quotes) is provided as the value then the\n\
\        stego file is written to stdout\n\
\n\
\    -c, --compress\n\
\        Compress the message file before embedding (default)\n\
\n\
\    -C, --nocompress\n\
\        Do not compress the message file before embedding\n\
\n\
\    -e, --encrypt\n\
\        Encrypt the message file before embedding\n\
\n\
\    -E, --noencrypt\n\
\        Do not encrypt the message file before embedding (default)\n\
\n\
\    -p, --password\n\
\        Password to be used for encryption. If this is not provided then\n\
\        prompt will be displayed for entry\n\
\n\
「extract」コマンドのオプション：\n\
\n\
\    -sf, --stegofile <ファイル名>\n\
\        Stego file containing the embedded message\n\
\n\
\    -xf, --extractfile <ファイル名>\n\
\        Optional filename for the extracted data. Use this to override the\n\
\        filename embedded in the stego file\n\
\n\
\    -xd, --extractdir <フォルダー名>\n\
\        Directory where the message file will be extracted. If this option is\n\
\        not provided, then the file is extracted to current directory\n\
\n\
\    -p, --password\n\
\        Password to be used for decryption. If this is not provided then\n\
\        prompt will be displayed for entry (if the message is encrypted)\n\
\n\
例：\n\
\n\
\  To embed secret.txt into wallpaper.png and generate the output into test.png:\n\
\n\
\      java -jar <パス>{0}openstego.jar embed -a lsb -mf secret.txt \\\n\
\        -cf wallpaper.png -sf test.png\n\
\   OR\n\
\      java -jar <パス>{0}openstego.jar --embed --algorithm=lsb \\\n\
\        --messagefile=secret.txt --coverfile=wallpaper.png --stegofile=test.png\n\
\n\
\  To extract embedded data from test.png to /data directory:\n\
\n\
\      java -jar <パス>{0}openstego.jar extract -a lsb -sf test.png -xd /data\n\
\   OR\n\
\      java -jar <パス>{0}openstego.jar extract --algorithm=lsb \\\n\
\        --stegofile=test.png --extractdir=/data\n\
\n\
\  Piping example:\n\
\n\
\      ls -R | java -jar <パス>{0}openstego.jar embed -a lsb > test.png\n\
\n\
\  Wildcard example (Please note that the double quotes are important):\n\
\n\
\      java -jar <パス>{0}openstego.jar embed -a lsb \\\n\
\        -cf \"img???.png;wall*.png\" -mf watermark.txt

cmd.msg.fileExtracted = ファイル「{0}」を取り出しました
cmd.msg.coverProcessed = カバーファイル「{0}」が処理され、ステゴデータを上書きされました。
cmd.msg.enterPassword = パスワードを入力：
cmd.msg.coverFileNotFound = ファイル名またはワイルドカード「{0}」を一致するファイルを見つかりません。
cmd.warn.stegoFileIgnored = 警告：複数のカバーファイルを入力されたため、ステゴファイル名を無視され、\
                            書くカバーファイルにステゴデータを上書きされます。cmd.label.purpose.caption = 目的：
cmd.label.purpose.DATA_HIDING = データの隠蔽
cmd.label.purpose.WATERMARKING = 電子透かし
